#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "bigint.h"
#include "miller-rabin.h"

std::string p_1024bit =
    "68294352699746087495779696363795722876293313715392875165012445907625"
    "670044697604360524935005484366717982111393882259962396153338121845354"
    "410187332953396839926911982813365078395384298409832523888620909736779"
    "078404299702782398228521137688807266000140851790839626232442247871402"
    "032080794194656157425305414058391";

std::string q_1024bit =
    "61662749655758860915631655952712709426773858082836912491818190233963"
    "827778818425702202253495510629666725773583349710487791018208161179127"
    "035566823668051336683111831675543423032610358479602991619105405756176"
    "161018574802046643941246304815753577438325598698136521701159212121012"
    "787505683636828775869075877935657";

std::string p_896bit =
    "523238769294736753543564601366409459195740060240497403894487371532515"
    "703614099071381326095302140589797278461916549532816913626747076128384"
    "378933357996470010414918295806906294733479160738150102731615468520049"
    "685920289134241654356203861531076480335260308753290276518612683";

std::string q_896bit =
    "401219882138989966281772246093387256546437726307099688846439526136473"
    "975462256079093264557673862793876010217665033061865944593977800912602"
    "136226360568652038060977032349564496421146865059503370601356541286180"
    "945891857951681173713800956493602813102577206062760911938606777";

std::string p_768bit =
    "496330529446303659913118247545083070207089636510736393326922118620071"
    "857748774209598843811516648782547449331748545183238262128439001044914"
    "002478875437476099701608788540311506582153607270652979209542720498968"
    "957388409011480398566199";

std::string q_768bit =
    "1123522211027441934137811149534447991898842272333952813064186275543818"
    "550157278206563950335545199563501547234369962418717343069710111364066"
    "599632418664752007252003837311372878652817320772108147851177724481085"
    "236859469634152740088179";

std::string p_640bit =
    "2530039593952420132037764916931508123880739679820249974239701060546715"
    "427894580108926398170355852392580895492734499995328644039675766378439"
    "787448524098886359918137191088541549975286209784001199";

std::string q_640bit =
    "463539347498115925044060011734223664950376160452541011806386884000289"
    "772604385893311352194131630905038380421667084989155439798760046682795"
    "675077561997052414198735008124717708272676434575749541";

std::string p_512bit =
    "631264565180476132207928240549299331370135074875535196682523118767376"
    "005341849248780027468027792844995209101631682168421004892745833400021"
    "468667641930919";

std::string q_512bit =
    "6229425811746705010412387199640008636722253243772399153087352198602761"
    "530564040652079735814517762508851897276186177362851729935712298128079"
    "315260231948521";

const std::string exp_constant = "17";

std::vector<std::pair<std::string, std::string>> prime_digits;

void init_prime_digit()
{
    prime_digits.push_back(std::make_pair(p_1024bit, q_1024bit));
    prime_digits.push_back(std::make_pair(p_896bit, q_896bit));
    prime_digits.push_back(std::make_pair(p_768bit, q_768bit));
    prime_digits.push_back(std::make_pair(p_640bit, q_640bit));
    prime_digits.push_back(std::make_pair(p_512bit, q_512bit));
}

struct public_key
{
    bigint modulus;
    bigint exponent;
    public_key(bigint mod, bigint exp)
    {
        modulus = mod;
        exponent = exp;
    }
};

struct private_key
{
    bigint modulus;
    bigint exponent;
    bigint modulus_p;
    bigint modulus_q;
    private_key(bigint mod, bigint exp)
    {
        modulus = mod;
        exponent = exp;
        modulus_p = 0;
        modulus_q = 0;
    }
};

bigint ExtEuclid(bigint a, bigint b);

bigint rsa_modExp(bigint b, bigint e, bigint m);

void rsa_gen_keys(struct public_key* pub, struct private_key* priv, std::string p, std::string q);

bigint rsa_encrypt(const bigint message, const struct public_key* pub);

bigint rsa_decrypt(const bigint message, const struct private_key* priv);

bigint miller_rabin_generator(std::string s, int digiit_amount = 102);

void miller_rabin_check(std::string s);

